# -*- coding: utf-8 -*-
"""Diabeties_prediction_SVM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hGMGOnHvolyrhYOfAVCktC5VXGra3afJ

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and Analysis

"""

diabetes_data= pd.read_csv('/content/diabetes.csv')
diabetes_data.head()

pd.read_csv?
# to know any func of description

#Get statistical mesaures.
diabetes_data.describe()

# number of rows and coluns in df
diabetes_data.shape

#calucate the number of 1 and 0 in dataset.
diabetes_data['Outcome'].value_counts()

"""1--> *diabetes*
0-->*NO diabetes*
"""

diabetes_data.groupby('Outcome').mean()

x=diabetes_data.drop(columns='Outcome',axis=1)
#axis=1 for column and axis=0 for rows

y=diabetes_data['Outcome']

print(x,y)

#data standardization in a range as all the columns are in aftterent values
scaler= StandardScaler()

scaler.fit(x)

Standard_data = scaler.transform(x)

print(Standard_data)

"""Now the values are in similar range 0 to 1

"""

x=Standard_data
y=diabetes_data['Outcome']

print(x,y)

"""plit data in train and test"""

x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Trainign the model"""

classifier=svm.SVC(kernel='linear')
#fiting training data according to classifer
classifier.fit(x_train,y_train)

"""To evaluate the model. ie checking the accurate prediction

"""

x_train_prediction= classifier.predict(x_train)
train_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('accuracy score of training data:  ',train_data_accuracy*100)

#testing on test data
x_test_prediction= classifier.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)
print('Accuracy score of test data: ',test_data_accuracy*100)
train_data_accuracy=accuracy_score(x_train_prediction,y_train)
print('accuracy score of training data:  ',train_data_accuracy*100)

"""good score to predict.
No overfitting

"""

# system the predicts the diabetes or not.
input_data=(2,197,70,45,543,30.5,0.158,53)
#1
# feeding the data in module
#change to numpy array
input_data_as_numpy_array=np.asarray(input_data)

# now re-shape the data as we are predicting for one instance
#if we don't reshape it will consider 769 data pts.
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)

#standadized the input data
std_scaler=scaler.transform(input_data_reshape)
print(std_scaler)

prediction=classifier.predict(std_scaler)
print(prediction)
if(prediction[0]==0):
  print('non diabetic')
else:
  print('diabetic')



